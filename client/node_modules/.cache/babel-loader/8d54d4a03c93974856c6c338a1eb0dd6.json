{"ast":null,"code":"var _jsxFileName = \"/home/tharshz/Music/my project/client/src/components/profiles/chat.js\";\n\nfunction simulateNetworkRequest() {\n  return new Promise(resolve => setTimeout(resolve, 2000));\n}\n\nfunction LoadingButton() {\n  const [isLoading, setLoading] = useState(false);\n  useEffect(() => {\n    if (isLoading) {\n      simulateNetworkRequest().then(() => {\n        setLoading(false);\n      });\n    }\n  }, [isLoading]);\n\n  const handleClick = () => setLoading(true);\n\n  return React.createElement(Button, {\n    variant: \"primary\",\n    disabled: isLoading,\n    onClick: !isLoading ? handleClick : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, isLoading ? 'Loading…' : 'Click to load');\n}\n\nrender(React.createElement(LoadingButton, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29\n  },\n  __self: this\n}));","map":{"version":3,"sources":["/home/tharshz/Music/my project/client/src/components/profiles/chat.js"],"names":["simulateNetworkRequest","Promise","resolve","setTimeout","LoadingButton","isLoading","setLoading","useState","useEffect","then","handleClick","render"],"mappings":";;AAAA,SAASA,sBAAT,GAAkC;AAC9B,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAU,IAAV,CAAnC,CAAP;AACD;;AAED,SAASE,aAAT,GAAyB;AACvB,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0BC,QAAQ,CAAC,KAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIH,SAAJ,EAAe;AACbL,MAAAA,sBAAsB,GAAGS,IAAzB,CAA8B,MAAM;AAClCH,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OAFD;AAGD;AACF,GANQ,EAMN,CAACD,SAAD,CANM,CAAT;;AAQA,QAAMK,WAAW,GAAG,MAAMJ,UAAU,CAAC,IAAD,CAApC;;AAEA,SACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAC,SADV;AAEE,IAAA,QAAQ,EAAED,SAFZ;AAGE,IAAA,OAAO,EAAE,CAACA,SAAD,GAAaK,WAAb,GAA2B,IAHtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGL,SAAS,GAAG,UAAH,GAAgB,eAL5B,CADF;AASD;;AAEDM,MAAM,CAAC,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAD,CAAN","sourcesContent":["function simulateNetworkRequest() {\n    return new Promise((resolve) => setTimeout(resolve, 2000));\n  }\n  \n  function LoadingButton() {\n    const [isLoading, setLoading] = useState(false);\n  \n    useEffect(() => {\n      if (isLoading) {\n        simulateNetworkRequest().then(() => {\n          setLoading(false);\n        });\n      }\n    }, [isLoading]);\n  \n    const handleClick = () => setLoading(true);\n  \n    return (\n      <Button\n        variant=\"primary\"\n        disabled={isLoading}\n        onClick={!isLoading ? handleClick : null}\n      >\n        {isLoading ? 'Loading…' : 'Click to load'}\n      </Button>\n    );\n  }\n  \n  render(<LoadingButton />);"]},"metadata":{},"sourceType":"module"}